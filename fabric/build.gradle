plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        // Use MC_USERNAME and MC_ACCESS_TOKEN in your system environment variables to use your Minecraft account in dev
        if (name == "client") {
            if(System.getenv('MC_USERNAME') && System.getenv('MC_UUID') && System.getenv('MC_ACCESS_TOKEN')) {
                programArgs '--username', System.getenv('MC_USERNAME'), '--uuid', System.getenv('MC_UUID'), '--accessToken', System.getenv('MC_ACCESS_TOKEN')
            }
        }
    }
}

unifiedPublishing {
    project {
        displayName = "üçÇ [Fabric] - Gliders - $rootProject.minecraft_version-v$rootProject.mod_version"
        releaseType = "release"
        changelog = new File("${rootProject.projectDir}/changelog.md").text
        gameVersions = ["1.21.1"]
        mainPublication tasks.remapJar
        gameLoaders = ["fabric"]
        relations {
            depends {
                curseforge = "fabric-api"
                modrinth = "fabric-api"
            }
        }

        var CURSE_API_KEY = project.findProperty("curseforge") ?: System.getenv("curseforge") ?: ""
        if (CURSE_API_KEY != "") {
            curseforge {
                token = CURSE_API_KEY
                id = "828331"
                gameVersions.addAll "Java 21", "1.21.1"
            }
        }

        var MODRINTH_TOKEN = project.findProperty("modrinth") ?: System.getenv("modrinth") ?: ""
        if (MODRINTH_TOKEN != "") {
            modrinth {
                token = MODRINTH_TOKEN
                id = "XiC6HzoU"
                version = "$rootProject.mod_version+$project.name"
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // Player Animator
    // include modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${rootProject.player_anim_version}")
    include modImplementation("curse.maven:playeranimator-658587:6024464") {
        exclude group: "net.neoforged"
    }

    modApi("net.threetag:palladiumcore-fabric:${rootProject.palladiumcore_version}") {
        exclude group: "net.neoforged"
    }
    include("net.threetag:palladiumcore-fabric:${rootProject.palladiumcore_version}") {
        exclude group: "net.neoforged"
    }

    // Cardinal Components
    modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components_version}") {
        exclude group: "net.neoforged"
    }
    modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components_version}") {
        exclude group: "net.neoforged"
    }
    include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components_version}") {
        exclude group: "net.neoforged"
    }
    include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components_version}") {
        exclude group: "net.neoforged"
    }

    // Mod Menu
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
        exclude group: "net.neoforged"
    }

    // JEI
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}") {
        exclude group: "net.neoforged"
    }
    modLocalRuntime("mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}") {
        exclude group: "net.neoforged"
    }

    // Trinkets
    modImplementation("dev.emi:trinkets:${rootProject.trinkets_version}") {
        exclude group: "dev.onyxstudios.cardinal-components-api"
    }

    modImplementation("mysticdrew:common-networking-fabric:1.0.16-1.21") {
        exclude group: "net.fabricmc.fabric-api"
    }

    include("mysticdrew:common-networking-fabric:1.0.16-1.21") {
        exclude group: "net.fabricmc.fabric-api"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }
}

processResources {
    inputs.property "version", project.mod_version
    inputs.property "mod_name", rootProject.mod_name
    inputs.property "mod_author", rootProject.mod_author
    inputs.property "mod_license", rootProject.mod_license

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version,
                "mod_name": rootProject.mod_name,
                "mod_author": rootProject.mod_author,
                "mod_license": rootProject.mod_license
    }
}

sourceSets.main.resources {
    srcDir project(":neoforge").file("src/generated/resources").absolutePath
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier =  "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = 'fabric-' + rootProject.mod_version
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
